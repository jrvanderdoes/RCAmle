ggplot2::geom_line(ggplot2::aes(x=Date, y=Value, col=dataName,
linetype=dataName), trueData,
key_glyph = "path",size=1) +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = 'blank',size=1) +
ggplot2::geom_blank(ggplot2::aes(col='beta', linetype='beta'),
key_glyph = "blank") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(size=14)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",dataName),#c('beta',dataName,"CPs"),
values = c(colors[c(1,5)],'black')) +#c('black','black','red')) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', dataName),#c('beta',dataName,"CPs"),
values = c('solid', 'dashed',"solid"))#xxx
#dataPlot <-
ggplot2::ggplot() +
ggplot2::geom_line(ggplot2::aes(x=Date, y=Value, col=dataName,
linetype=dataName), trueData,
key_glyph = "path",size=1) +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = 'blank',size=1) +
ggplot2::geom_blank(ggplot2::aes(col='beta', linetype='beta'),
key_glyph = "blank") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(size=14)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",dataName),#c('beta',dataName,"CPs"),
values = c('black','black','red')) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', dataName),#c('beta',dataName,"CPs"),
values = c('solid', 'dashed',"solid"))#xxx
#dataPlot <-
ggplot2::ggplot() +
ggplot2::geom_line(ggplot2::aes(x=Date, y=Value, col=dataName,
linetype=dataName), trueData,
key_glyph = "path",size=1) +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = 'blank',size=1) +
ggplot2::geom_blank(ggplot2::aes(col='beta', linetype='beta'),
key_glyph = "blank") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(size=14)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",dataName),#c('beta',dataName,"CPs"),
values = c('black','black','red')) +#c(colors[c(1,5)],'black')) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', dataName),#c('beta',dataName,"CPs"),
values = c('solid', 'dashed',"solid"))#xxx
#dataPlot <-
ggplot2::ggplot() +
ggplot2::geom_line(ggplot2::aes(x=Date, y=Value, col=dataName,
linetype=dataName), trueData,
key_glyph = "path",size=1) +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = 'blank',size=1) +
ggplot2::geom_blank(ggplot2::aes(col='beta', linetype='beta'),
key_glyph = "blank") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(size=14)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",dataName),#c('beta',dataName,"CPs"),
values = c('black','red','black')) +#c(colors[c(1,5)],'black')) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', dataName),#c('beta',dataName,"CPs"),
values = c('solid', 'dashed',"solid"))#xxx
#dataPlot <-
ggplot2::ggplot() +
ggplot2::geom_line(ggplot2::aes(x=Date, y=Value, col=dataName,
linetype=dataName), trueData,
key_glyph = "path",size=1) +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = 'blank',size=1) +
ggplot2::geom_blank(ggplot2::aes(col='beta', linetype='beta'),
key_glyph = "blank") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(size=14)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",dataName),#c('beta',dataName,"CPs"),
values = c('blue','red','black')) +#c(colors[c(1,5)],'black')) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', dataName),#c('beta',dataName,"CPs"),
values = c('solid', 'dashed',"solid"))#xxx
#dataPlot <-
ggplot2::ggplot() +
ggplot2::geom_line(ggplot2::aes(x=Date, y=Value, col=dataName,
linetype=dataName), trueData,
key_glyph = "path",size=1) +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = 'blank',size=1) +
ggplot2::geom_blank(ggplot2::aes(col='beta', linetype='beta'),
key_glyph = "blank") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(size=14)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",dataName),#c('beta',dataName,"CPs"),
values = c('black','red','black')) +#c(colors[c(1,5)],'black')) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', dataName),#c('beta',dataName,"CPs"),
values = c('solid', 'dashed',"solid"))#xxx
#bPlot <-
ggplot2::ggplot() +
ggplot2::geom_segment(ggplot2::aes(x = st, y = b1, xend = en, yend = b1,
colour = "beta",  linetype='beta'), data = parCPData,
key_glyph = "path",size=1) +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = "blank",size=1) +
ggplot2::geom_blank(ggplot2::aes(col=dataName, linetype=dataName),
key_glyph = "blank") +
ggplot2::theme_bw()+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(size=14)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",dataName),#c('beta',dataName,"CPs"),
values = c('black','red','black')) +#c(colors[c(1,5)],'black')) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', dataName),#c('beta',dataName,"CPs"),
values = c('solid', 'dashed',"solid"))#xxx
dataPlot <-
ggplot2::ggplot() +
ggplot2::geom_line(ggplot2::aes(x=Date, y=Value, col=dataName,
linetype=dataName), trueData,
key_glyph = "path",size=1) +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = 'blank',size=1) +
ggplot2::geom_blank(ggplot2::aes(col='beta', linetype='beta'),
key_glyph = "blank") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(size=14)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",dataName),#c('beta',dataName,"CPs"),
values = c('black','red','black')) +#c(colors[c(1,5)],'black')) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', dataName),#c('beta',dataName,"CPs"),
values = c('solid', 'dashed',"solid"))#xxx
bPlot <-
ggplot2::ggplot() +
ggplot2::geom_segment(ggplot2::aes(x = st, y = b1, xend = en, yend = b1,
colour = "beta",  linetype='beta'), data = parCPData,
key_glyph = "path",size=1) +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = "blank",size=1) +
ggplot2::geom_blank(ggplot2::aes(col=dataName, linetype=dataName),
key_glyph = "blank") +
ggplot2::theme_bw()+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(size=14)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",dataName),#c('beta',dataName,"CPs"),
values = c('black','red','black')) +#c(colors[c(1,5)],'black')) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', dataName),#c('beta',dataName,"CPs"),
values = c('solid', 'dashed',"solid"))#xxx
# Combine
plot <-
dataPlot + bPlot +
patchwork::plot_layout(nrow = 2, guides = "collect",
heights = c(2,1)) + #unit(c(1,2),c('cm','null'))) +
patchwork::plot_annotation(
title = title,
subtitle = subtitle,
theme = ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size=22),
plot.subtitle = ggplot2::element_text(hjust = 0.5))
) &
#theme(legend.position='bottom')
ggplot2::theme(legend.position='none')
if(varPlots){
dataPlot <-
ggplot2::ggplot() +
ggplot2::geom_line(ggplot2::aes(x=Date, y=Value, col='Data',
linetype='Data'), trueData,
key_glyph = "path") +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = 'blank') +
ggplot2::geom_blank(ggplot2::aes(col='beta', linetype='beta'),
key_glyph = "blank") +
ggplot2::geom_blank(ggplot2::aes(col='var1', linetype='var1'),
key_glyph = "blank") +
ggplot2::geom_blank(ggplot2::aes(col='var2', linetype='var2'),
key_glyph = "blank") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank()) +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",'data', 'var1', 'var2'),
values = c(colors[c(1,5)],'black',colors[3:4])) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', "data", 'var1', 'var2'),
values = c('solid',"dashed",'solid','solid','solid'))
bPlot <-
ggplot2::ggplot() +
ggplot2::geom_segment(ggplot2::aes(x = st, y = b1, xend = en, yend = b1,
colour = "beta",  linetype='beta'), data = parCPData,
key_glyph = "path") +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = "blank") +
ggplot2::geom_blank(ggplot2::aes(col='Data', linetype='Data'),
key_glyph = "blank") +
ggplot2::geom_blank(ggplot2::aes(col='var1', linetype='var1'),
key_glyph = "blank") +
ggplot2::geom_blank(ggplot2::aes(col='var2', linetype='var2'),
key_glyph = "blank") +
ggplot2::theme_bw()+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank()) +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",'data', 'var1', 'var2'),
values = c(colors[c(1,5)],'black',colors[3:4])) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', "data", 'var1', 'var2'),
values = c('solid',"dashed", 'solid', 'solid', 'solid'))
v1Plot <-
ggplot2::ggplot() +
ggplot2::geom_segment(ggplot2::aes(x = st, y = v1, xend = en, yend = v1,
colour = "var1",  linetype='var1'), data = parCPData,
key_glyph = "path") +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = "blank") +
ggplot2::geom_blank(ggplot2::aes(col='Data', linetype='Data'),
key_glyph = "blank") +
ggplot2::geom_blank(ggplot2::aes(col='beta', linetype='beta'),
key_glyph = "blank") +
ggplot2::geom_blank(ggplot2::aes(col='var2', linetype='var2'),
key_glyph = "blank") +
ggplot2::theme_bw()+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank()) +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",'data', 'var1', 'var2'),
values = c(colors[c(1,5)],'black',colors[3:4])) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', "data", 'var1', 'var2'),
values = c('solid',"dashed", 'solid', 'solid', 'solid'))
v2Plot <-
ggplot2::ggplot() +
ggplot2::geom_segment(ggplot2::aes(x = st, y = v2, xend = en, yend = v2,
colour = "var2",  linetype='var2'), data = parCPData,
key_glyph = "path") +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = "blank") +
ggplot2::geom_blank(ggplot2::aes(col='Data', linetype='Data'),
key_glyph = "blank") +
ggplot2::geom_blank(ggplot2::aes(col='beta', linetype='beta'),
key_glyph = "blank") +
ggplot2::geom_blank(ggplot2::aes(col='var1', linetype='var1'),
key_glyph = "blank") +
ggplot2::theme_bw()+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank()) +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",'data', 'var1', 'var2'),
values = c(colors[c(1,5)],'black',colors[3:4])) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', "data", 'var1', 'var2'),
values = c('solid',"dashed", 'solid', 'solid', 'solid'))
# Combine
plot <-
dataPlot + bPlot + v1Plot + v2Plot +
patchwork::plot_layout(nrow = 5, guides = "collect",
heights = c(3,1,1,1)) + #unit(c(1,2),c('cm','null'))) +
patchwork::plot_annotation(
title = title,
subtitle = subtitle,
theme = ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),
plot.subtitle = ggplot2::element_text(hjust = 0.5))
) &
ggplot2::theme(legend.position='bottom')
} else{
dataPlot <-
ggplot2::ggplot() +
ggplot2::geom_line(ggplot2::aes(x=Date, y=Value, col=dataName,
linetype=dataName), trueData,
key_glyph = "path",size=1) +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = 'blank',size=1) +
ggplot2::geom_blank(ggplot2::aes(col='beta', linetype='beta'),
key_glyph = "blank") +
ggplot2::theme_bw() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(size=14)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",dataName),#c('beta',dataName,"CPs"),
values = c('black','red','black')) +#c(colors[c(1,5)],'black')) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', dataName),#c('beta',dataName,"CPs"),
values = c('solid', 'dashed',"solid"))#xxx
bPlot <-
ggplot2::ggplot() +
ggplot2::geom_segment(ggplot2::aes(x = st, y = b1, xend = en, yend = b1,
colour = "beta",  linetype='beta'), data = parCPData,
key_glyph = "path",size=1) +
ggplot2::geom_vline(ggplot2::aes(xintercept=parCPData$st[-1], col='CPs',
linetype='CPs'),
key_glyph = "blank",size=1) +
ggplot2::geom_blank(ggplot2::aes(col=dataName, linetype=dataName),
key_glyph = "blank") +
ggplot2::theme_bw()+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 10),
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(size=14)) +
ggplot2::theme(legend.position = 'none') +
ggplot2::scale_colour_manual(name = "Method:",
labels = c('beta',"CPs",dataName),#c('beta',dataName,"CPs"),
values = c('black','red','black')) +#c(colors[c(1,5)],'black')) +
ggplot2::scale_linetype_manual(name = "Method:",
labels = c('beta','CPs', dataName),#c('beta',dataName,"CPs"),
values = c('solid', 'dashed',"solid"))#xxx
# Combine
plot <-
dataPlot + bPlot +
patchwork::plot_layout(nrow = 2, guides = "collect",
heights = c(2,1)) + #unit(c(1,2),c('cm','null'))) +
patchwork::plot_annotation(
title = title,
subtitle = subtitle,
theme = ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size=22),
plot.subtitle = ggplot2::element_text(hjust = 0.5))
) &
#theme(legend.position='bottom')
ggplot2::theme(legend.position='none')
}
plot
load_all()
UKCovidList
tmp <- UKCovidList
View(tmp)
View(append(tmp, list(list(result_Vost,data_plot))))
load_all()
UKCovidList <- list()
for(nation in c('England','Northern Ireland','Scotland','Wales')){
## Load data
data <- UKcovid[UKcovid$nation==nation,c(2,3)]
data <- data[order(data$date),]
## Detect CP
set.seed(12345)
result_Vost <- binarySegmentationCPDetection(fullData=data,
method='Vostrikova',
lower=c(-Inf, 0, 10^-8, -Inf),
upper=c(Inf, Inf, Inf, Inf),
alpha=0.05, nStart=NA, nEnd=NA,
trimAmt = 14, silent=T )
data_plot <- renderStackedPlot(trueData = data,
parCPData = result_Vost[,c(1:2,7:10)],
title = NULL,
subtitle = NULL,
dataName = nation,
varPlots = FALSE)
## Save data
UKCovidList <- append(UKCovidList, list(list(result_Vost,data_plot)))
}
UKCovidList <- list()
for(nation in c('England','Northern Ireland','Scotland','Wales')){
## Load data
data <- UKcovid[UKcovid$nation==nation,c(2,3)]
data <- data[order(data$date),]
## Detect CP
set.seed(12345)
result_Vost <- binarySegmentationCPDetection(fullData=data,
method='Vostrikova',
lower=c(-Inf, 0, 10^-8, -Inf),
upper=c(Inf, Inf, Inf, Inf),
alpha=0.05, nStart=NA, nEnd=NA,
trimAmt = 14, silent=F )
data_plot <- renderStackedPlot(trueData = data,
parCPData = result_Vost[,c(1:2,7:10)],
title = NULL,
subtitle = NULL,
dataName = nation,
varPlots = FALSE)
## Save data
UKCovidList <- append(UKCovidList, list(list(result_Vost,data_plot)))
}
View(UKCovidList)
saveRDS(UKCovidList,'/data-paper/UKCovidList.rds')
saveRDS(UKCovidList,'./data-paper/UKCovidList.rds')
UKCovidList[[1]][[2]]
UKCovidList[[2]][[2]]
UKCovidList[[3]][[2]]
UKCovidList[[4]][[2]]
UKCovidList <- list()
for(nation in c('England','Northern Ireland','Scotland','Wales')){
## Load data
data <- UKcovid[UKcovid$nation==nation,c(2,3)]
data <- data[order(data$date),]
## Detect CP
set.seed(12345)
result_Vost <- binarySegmentationCPDetection(fullData=data,
method='Vostrikova',
lower=c(-Inf, 0, 10^-8, -Inf),
upper=c(Inf, Inf, Inf, Inf),
alpha=0.05, nStart=NA, nEnd=NA,
trimAmt = 4)
data_plot <- renderStackedPlot(trueData = data,
parCPData = result_Vost[,c(1:2,7:10)],
title = NULL,
subtitle = NULL,
dataName = nation,
varPlots = FALSE)
## Save data
UKCovidList <- append(UKCovidList, list(list(result_Vost,data_plot)))
}
UKCovidList <- list()
for(nation in c('England','Northern Ireland','Scotland','Wales')){
## Load data
data <- UKcovid[UKcovid$nation==nation,c(2,3)]
data <- data[order(data$date),]
## Detect CP
set.seed(12345)
result_Vost <- binarySegmentationCPDetection(fullData=data,
method='Vostrikova',
lower=c(-Inf, 0, 10^-8, -Inf),
upper=c(Inf, Inf, Inf, Inf),
alpha=0.05, nStart=NA, nEnd=NA,
trimAmt = 4)
data_plot <- renderStackedPlot(trueData = data,
parCPData = result_Vost[,c(1:2,7:10)],
title = NULL,
subtitle = NULL,
dataName = nation,
varPlots = FALSE)
## Save data
UKCovidList <- append(UKCovidList, list(list(result_Vost,data_plot)))
}
trimSelect(14,'Start', mult=startEndMult)
computeTrim(14,'Start', mult=startEndMult)
computeTrim(14,'Start')
computeTrim(14,'Start',100)
computeTrim(14,'End',100)
UKCovidList <- list()
for(nation in c('England','Northern Ireland','Scotland','Wales')){
## Load data
data <- UKcovid[UKcovid$nation==nation,c(2,3)]
data <- data[order(data$date),]
## Detect CP
set.seed(12345)
result_Vost <- binarySegmentationCPDetection(fullData=data,
method='Vostrikova',
lower=c(-Inf, 0, 10^-8, -Inf),
upper=c(Inf, Inf, Inf, Inf),
alpha=0.05, nStart=NA, nEnd=NA,
trimAmt = 4)
data_plot <- renderStackedPlot(trueData = data,
parCPData = result_Vost[,c(1:2,7:10)],
title = NULL,
subtitle = NULL,
dataName = nation,
varPlots = FALSE)
## Save data
UKCovidList <- append(UKCovidList, list(list(result_Vost,data_plot)))
}
data_plot
nation
nation='England'
## Load data
data <- UKcovid[UKcovid$nation==nation,c(2,3)]
data <- data[order(data$date),]
## Detect CP
set.seed(12345)
result_Vost <- binarySegmentationCPDetection(fullData=data,
method='Vostrikova',
lower=c(-Inf, 0, 10^-8, -Inf),
upper=c(Inf, Inf, Inf, Inf),
alpha=0.05, nStart=NA, nEnd=NA,
trimAmt = 10)
data_plot <- renderStackedPlot(trueData = data,
parCPData = result_Vost[,c(1:2,7:10)],
title = NULL,
subtitle = NULL,
dataName = nation,
varPlots = FALSE)
data_plot
