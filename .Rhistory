pivot_wider(names_from = c(iters,errType), values_from = Estim)
kable(tmp, 'latex', booktabs = TRUE) %>%
pack_rows(index = c(tmp$beta))
kable(tmp, booktabs = TRUE) %>%
pack_rows(index = c(tmp$beta))
kable(tmp, booktabs = TRUE) %>%
pack_rows(index = table(tmp$beta))
data_er$errType
ifelse(data_er$errType=='Normal','N,'B')'
ifelse(data_er$errType=='Normal','N,'B')
ifelse(data_er$errType=='Normal','N','B')
data_er$errType <- ifelse(data_er$errType=='Normal','N','B')
tmp <- data_er %>%
dplyr::select(-c(Lower,Upper)) %>%
pivot_wider(names_from = c(iters,errType), values_from = Estim)
kable(tmp, booktabs = TRUE) %>%
pack_rows(index = table(tmp$beta))
kable(tmp[,-c('Beta')], booktabs = TRUE) %>%
pack_rows(index = table(tmp$beta))
kable(tmp[,!(colnames(tmp)%in%c('Beta'))], booktabs = TRUE) %>%
pack_rows(index = table(tmp$beta))
View(tmp)
kable(tmp[,!(colnames(tmp)%in%c('Beta'))], booktabs = TRUE) %>%
pack_rows(index = table(tmp$beta))
tmp[,!(colnames(tmp)%in%c('Beta'))]
kable(tmp[,!(colnames(tmp)%in%c('beta'))], booktabs = TRUE) %>%
pack_rows(index = table(tmp$beta))
data <- c(1:50,151:200)
fullData<- data.frame(1:100,data)
method='Vostrikova'
lower=c(-Inf,0,10^-8,-Inf)
upper <- rep(Inf,4)
alpha=0.05
estimVarLS=FALSE
var1BaseEstim = 0.5
var2BaseEstim = NA
maxOptimIters = 1
trimAmt = 10
verifyCPs = TRUE
silent = F
# Prepare
fullData <- fullData[order(fullData[,1]),]
onlyData <- fullData[,2]
# Get change points
if(!silent) cat('\n--Find CPs --\n')
CPsVals <- .detectChangePoints(data=onlyData, method=method,
lower=lower, upper=upper,
alpha=alpha,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters,
trimAmt=trimAmt,
silent=silent)
CPsVals
onlyData
plot(onlyData)
onlyData<-onlyData+(rep(-50,50),rep(50,50))
onlyData<-onlyData+c(rep(-50,50),rep(50,50))
onlyData
plot(onlyData)
CPsVals <- .detectChangePoints(data=onlyData, method=method,
lower=lower, upper=upper,
alpha=alpha,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters,
trimAmt=trimAmt,
silent=silent)
estimVarLS
CPsVals
generateRCA1Data(c(0,0.2,0.4,1),50,100,100)
onlyData<-generateRCA1Data(c(0,0.2,0.4,1),50,100,100)
CPsVals <- .detectChangePoints(data=onlyData, method=method,
lower=lower, upper=upper,
alpha=alpha,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters,
trimAmt=trimAmt,
silent=silent)
onlyData<-c(generateRCA1Data(c(0,0.2,0.4,1),50,100,100),generateRCA1Data(c(0,0.2,0.4,1),50,100,100))
CPsVals <- .detectChangePoints(data=onlyData, method=method,
lower=lower, upper=upper,
alpha=alpha,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters,
trimAmt=trimAmt,
silent=silent)
onlyData<-c(generateRCA1Data(c(0,0.2,0.4,1),40,80,80),generateRCA1Data(c(0,0.2,0.4,1),40,80,80))
CPsVals <- .detectChangePoints(data=onlyData, method=method,
lower=lower, upper=upper,
alpha=alpha,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters,
trimAmt=trimAmt,
silent=silent)
CPsVals
CPsVals <- .detectChangePoints(data=rev(onlyData), method=method,
lower=lower, upper=upper,
alpha=alpha,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters,
trimAmt=trimAmt,
silent=silent)
CPsVals <- .detectChangePoints(data=rev(onlyData), method=method,
lower=lower, upper=upper,
alpha=alpha,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters,
trimAmt=trimAmt,
silent=silent)
onlyData<-c(rev(generateRCA1Data(c(0,0.2,0.4,1),40,80,80)),generateRCA1Data(c(0,0.2,0.4,1),40,80,80))
CPsVals <- .detectChangePoints(data=onlyData, method=method,
lower=lower, upper=upper,
alpha=alpha,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters,
trimAmt=trimAmt,
silent=silent)
CPsVals <- .detectChangePoints(data=rev(onlyData), method=method,
lower=lower, upper=upper,
alpha=alpha,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters,
trimAmt=trimAmt,
silent=silent)
data=rev(onlyData)
# Prepare
sendVar2 <- var2BaseEstim
if(is.na(var2BaseEstim)) var2BaseEstim <- median( abs(data - median(data)))/0.6745
nStart <- computeTrim(trimAmt,'Start',length(data))
nEnd <- computeTrim(trimAmt,'End',length(data))
if(nStart>= nEnd) return()
# Determine Method
if(method == 'MLE'){
result <-
MLEIndicator(u= rep(NA,4), data,
lower=lower, upper=upper,
alpha = alpha,
nStart = nStart, nEnd=nEnd,
returnEstims = FALSE,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters)
} else if(method == 'Vostrikova'){
result <-
MLEVostIndicator(u= rep(NA,4), data,
lower=lower, upper=upper,
alpha = alpha,
nStart = nStart, nEnd=nEnd,
returnEstims = FALSE,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters)
} else if(method == 'WLS'){
result <-
WLSIndicator(y=data, N=length(data),
alpha = alpha)
} else {
stop('Incorrect Method specified')
}
# No Change Point Detected
if(is.na(result[1]) ||
is.na(result[2]) ||
result[1] <= result[2]){
return()
}
addAmt
addAmt=
0
if(!silent) cat(paste0('ChangePoint Detected (',1+addAmt,'-' ,addAmt+length(data),' at ',
addAmt+result[3],'): Segment Data and Re-Search\n'))
result[3]
data[1:result[3]]
length(=data[1:result[3]])
length(data[1:result[3]])
result[3]-1
(result[3]+1)
load_all()
load_all()
housingDataList <- list()
UKCovidList <- list()
nation='England'
## Load data
data <- UKcovid[UKcovid$nation==nation,c(2,3)]
data <- data[order(data$date),]
## Detect CP
set.seed(12345)
fullData=data
method='Vostrikova'
lower=c(-Inf, 0, 10^-8, -Inf)
upper=c(Inf, Inf, Inf, Inf)
alpha=0.05
trimAmt =NA
silent=F
estimVarLS=FALSE
var1BaseEstim = 0.5
var2BaseEstim = NA
maxOptimIters = 1
verifyCPs = TRUE
# Prepare
fullData <- fullData[order(fullData[,1]),]
onlyData <- fullData[,2]
# Get change points
if(!silent) cat('\n--Find CPs --\n')
plot(fullData)
if(!silent) cat('\n--Find CPs --\n')
CPsVals <- .detectChangePoints(data=onlyData, method=method,
lower=lower, upper=upper,
alpha=alpha,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters,
trimAmt=trimAmt,
silent=silent)
CPsVals <- c(0, CPsVals, length(onlyData))
CPsVals
if(!silent) cat('\n-- Verify Step --\n')
CPsVals <- .verifyChangePoints(CPsVals=CPsVals, data=onlyData,
method=method,
lower=lower, upper=upper,
alpha=alpha,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim,
maxOptimIters = maxOptimIters,
trimAmt=trimAmt,
silent=silent)
data=onlyData
newCPVals <- c()
var2BaseEstim1 <- var2BaseEstim
# For no CP, i.e. c(0,length(data))
if(length(CPsVals)==2) CPsVals <- c(CPsVals,length(data))
for(i in 1:(length(CPsVals)-2)){
nStart <- computeTrim(trimAmt,'Start',length(data[(CPsVals[i]+1):CPsVals[i+2]]))
nEnd <- computeTrim(trimAmt,'End',length(data[(CPsVals[i]+1):CPsVals[i+2]]))
if(is.na(var2BaseEstim))
var2BaseEstim1 <- median( abs(data[(CPsVals[i]+1):CPsVals[i+2]] -
median(data[(CPsVals[i]+1):CPsVals[i+2]])))/0.6745
# Determine Method
if(method == 'MLE'){
result <-
MLEIndicator(u= rep(NA,4), data[(CPsVals[i]+1):CPsVals[i+2]],
lower=lower, upper=upper,
alpha = alpha,
nStart = nStart, nEnd=nEnd,
returnEstims = FALSE,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim1,
maxOptimIters = maxOptimIters)
} else if(method == 'Vostrikova'){
result <-
MLEVostIndicator(u= rep(NA,4), data[(CPsVals[i]+1):CPsVals[i+2]],
lower=lower, upper=upper,
alpha = alpha,
nStart = nStart, nEnd=nEnd,
returnEstims = FALSE,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim1,
maxOptimIters = maxOptimIters)
} else if(method == 'WLS'){
result <-
WLSIndicator(y=data[(CPsVals[i]+1):CPsVals[i+2]],
N=length(data[(CPsVals[i]+1):CPsVals[i+2]],),
alpha = alpha)
} else {
stop('Incorrect Method specified')
}
if(!(is.na(result[1]) || is.na(result[2]) || result[1] <= result[2])){
if(!silent) {
cat(paste0('ChangePoint Detected (',1+CPsVals[i],'-' ,
CPsVals[i]+length(data[(CPsVals[i]+1):CPsVals[i+2]]),
' at ',CPsVals[i]+result[3], '): Segment Data and Re-Search\n'))
}
newCPVals <- c(newCPVals, result[3]+CPsVals[i])
}
}
warnings()
data[(CPsVals[i]+1):CPsVals[i+2]]
nStart <- computeTrim(trimAmt,'Start',length(data[(CPsVals[i]+1):CPsVals[i+2]]))
nEnd <- computeTrim(trimAmt,'End',length(data[(CPsVals[i]+1):CPsVals[i+2]]))
nStart
nEnd
for(i in 1:(length(CPsVals)-2)){
nStart <- computeTrim(trimAmt,'Start',length(data[(CPsVals[i]+1):CPsVals[i+2]]))
nEnd <- computeTrim(trimAmt,'End',length(data[(CPsVals[i]+1):CPsVals[i+2]]))
if(nStart > nEnd) next
if(is.na(var2BaseEstim))
var2BaseEstim1 <- median( abs(data[(CPsVals[i]+1):CPsVals[i+2]] -
median(data[(CPsVals[i]+1):CPsVals[i+2]])))/0.6745
# Determine Method
if(method == 'MLE'){
result <-
MLEIndicator(u= rep(NA,4), data[(CPsVals[i]+1):CPsVals[i+2]],
lower=lower, upper=upper,
alpha = alpha,
nStart = nStart, nEnd=nEnd,
returnEstims = FALSE,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim1,
maxOptimIters = maxOptimIters)
} else if(method == 'Vostrikova'){
result <-
MLEVostIndicator(u= rep(NA,4), data[(CPsVals[i]+1):CPsVals[i+2]],
lower=lower, upper=upper,
alpha = alpha,
nStart = nStart, nEnd=nEnd,
returnEstims = FALSE,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim1,
maxOptimIters = maxOptimIters)
} else if(method == 'WLS'){
result <-
WLSIndicator(y=data[(CPsVals[i]+1):CPsVals[i+2]],
N=length(data[(CPsVals[i]+1):CPsVals[i+2]],),
alpha = alpha)
} else {
stop('Incorrect Method specified')
}
if(!(is.na(result[1]) || is.na(result[2]) || result[1] <= result[2])){
if(!silent) {
cat(paste0('ChangePoint Detected (',1+CPsVals[i],'-' ,
CPsVals[i]+length(data[(CPsVals[i]+1):CPsVals[i+2]]),
' at ',CPsVals[i]+result[3], '): Segment Data and Re-Search\n'))
}
newCPVals <- c(newCPVals, result[3]+CPsVals[i])
}
}
MLEIndicator(u= rep(NA,4), data[3:5],
lower=lower, upper=upper,
alpha = alpha,
nStart = 4, nEnd=4,
returnEstims = FALSE,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim1,
maxOptimIters = maxOptimIters)
MLEIndicator(u= rep(NA,4), data[1:10],
lower=lower, upper=upper,
alpha = alpha,
nStart = 4, nEnd=4,
returnEstims = FALSE,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim1,
maxOptimIters = maxOptimIters)
i
nStart <- computeTrim(trimAmt,'Start',length(data[(CPsVals[i]+1):CPsVals[i+2]]))
nEnd <- computeTrim(trimAmt,'End',length(data[(CPsVals[i]+1):CPsVals[i+2]]))
nStart
nEnd
cat(paste0('ChangePoint Detected (',1+CPsVals[i],'-' ,
CPsVals[i]+length(data[(CPsVals[i]+1):CPsVals[i+2]]),
' at ',CPsVals[i]+result[3], '): Segment Data and Re-Search\n'))
for(i in 1:4){
cat(i,'\n')
if(i ==3) next
}
if(i ==3) next
for(i in 1:4){
if(i ==3) next
cat(i,'\n')
}
newCPVals <- c()
var2BaseEstim1 <- var2BaseEstim
# For no CP, i.e. c(0,length(data))
if(length(CPsVals)==2) CPsVals <- c(CPsVals,length(data))
for(i in 1:(length(CPsVals)-2)){
nStart <- computeTrim(trimAmt,'Start',length(data[(CPsVals[i]+1):CPsVals[i+2]]))
nEnd <- computeTrim(trimAmt,'End',length(data[(CPsVals[i]+1):CPsVals[i+2]]))
if(nStart > nEnd) next
if(is.na(var2BaseEstim))
var2BaseEstim1 <- median( abs(data[(CPsVals[i]+1):CPsVals[i+2]] -
median(data[(CPsVals[i]+1):CPsVals[i+2]])))/0.6745
# Determine Method
cat(nStart)
if(method == 'MLE'){
result <-
MLEIndicator(u= rep(NA,4), data[(CPsVals[i]+1):CPsVals[i+2]],
lower=lower, upper=upper,
alpha = alpha,
nStart = nStart, nEnd=nEnd,
returnEstims = FALSE,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim1,
maxOptimIters = maxOptimIters)
} else if(method == 'Vostrikova'){
result <-
MLEVostIndicator(u= rep(NA,4), data[(CPsVals[i]+1):CPsVals[i+2]],
lower=lower, upper=upper,
alpha = alpha,
nStart = nStart, nEnd=nEnd,
returnEstims = FALSE,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim1,
maxOptimIters = maxOptimIters)
} else if(method == 'WLS'){
result <-
WLSIndicator(y=data[(CPsVals[i]+1):CPsVals[i+2]],
N=length(data[(CPsVals[i]+1):CPsVals[i+2]],),
alpha = alpha)
} else {
stop('Incorrect Method specified')
}
if(!(is.na(result[1]) || is.na(result[2]) || result[1] <= result[2])){
if(!silent) {
cat(paste0('ChangePoint Detected (',1+CPsVals[i],'-' ,
CPsVals[i]+length(data[(CPsVals[i]+1):CPsVals[i+2]]),
' at ',CPsVals[i]+result[3], '): Segment Data and Re-Search\n'))
}
newCPVals <- c(newCPVals, result[3]+CPsVals[i])
}
}
newCPVals <- c()
var2BaseEstim1 <- var2BaseEstim
# For no CP, i.e. c(0,length(data))
if(length(CPsVals)==2) CPsVals <- c(CPsVals,length(data))
for(i in 1:(length(CPsVals)-2)){
nStart <- computeTrim(trimAmt,'Start',length(data[(CPsVals[i]+1):CPsVals[i+2]]))
nEnd <- computeTrim(trimAmt,'End',length(data[(CPsVals[i]+1):CPsVals[i+2]]))
if(nStart > nEnd) next
if(is.na(var2BaseEstim))
var2BaseEstim1 <- median( abs(data[(CPsVals[i]+1):CPsVals[i+2]] -
median(data[(CPsVals[i]+1):CPsVals[i+2]])))/0.6745
# Determine Method
cat('- ',nStart,', ',nEnd,', ',length( data[(CPsVals[i]+1):CPsVals[i+2]]),'\n')
if(method == 'MLE'){
result <-
MLEIndicator(u= rep(NA,4), data[(CPsVals[i]+1):CPsVals[i+2]],
lower=lower, upper=upper,
alpha = alpha,
nStart = nStart, nEnd=nEnd,
returnEstims = FALSE,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim1,
maxOptimIters = maxOptimIters)
} else if(method == 'Vostrikova'){
result <-
MLEVostIndicator(u= rep(NA,4), data[(CPsVals[i]+1):CPsVals[i+2]],
lower=lower, upper=upper,
alpha = alpha,
nStart = nStart, nEnd=nEnd,
returnEstims = FALSE,
estimVarLS=estimVarLS,
var1BaseEstim = var1BaseEstim,
var2BaseEstim = var2BaseEstim1,
maxOptimIters = maxOptimIters)
} else if(method == 'WLS'){
result <-
WLSIndicator(y=data[(CPsVals[i]+1):CPsVals[i+2]],
N=length(data[(CPsVals[i]+1):CPsVals[i+2]],),
alpha = alpha)
} else {
stop('Incorrect Method specified')
}
if(!(is.na(result[1]) || is.na(result[2]) || result[1] <= result[2])){
if(!silent) {
cat(paste0('ChangePoint Detected (',1+CPsVals[i],'-' ,
CPsVals[i]+length(data[(CPsVals[i]+1):CPsVals[i+2]]),
' at ',CPsVals[i]+result[3], '): Segment Data and Re-Search\n'))
}
newCPVals <- c(newCPVals, result[3]+CPsVals[i])
}
}
load_all()
UKCovidList <- list()
for(nation in c('England','Northern Ireland','Scotland','Wales')){
## Load data
data <- UKcovid[UKcovid$nation==nation,c(2,3)]
data <- data[order(data$date),]
## Detect CP
set.seed(12345)
result_Vost <- binarySegmentationCPDetection(fullData=data,
method='Vostrikova',
lower=c(-Inf, 0, 10^-8, -Inf),
upper=c(Inf, Inf, Inf, Inf),
alpha=0.05,
trimAmt = NA )
data_plot <- renderStackedPlot(trueData = data,
parCPData = result_Vost[,c(1:2,7:10)],
title = NULL,
subtitle = NULL,
dataName = nation,
varPlots = FALSE)
## Save data
UKCovidList <- append(UKCovidList, list(list(result_Vost,data_plot)))
}
